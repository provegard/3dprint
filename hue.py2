from bluepy import btle

#MAC = "C9:81:C5:E7:F6:4A"
MAC = "FD:EA:F5:FF:CB:D1"

p = btle.Peripheral(MAC, btle.ADDR_TYPE_RANDOM)

skip = [
    btle.UUID("932c32bd-0002-47a2-835a-a8d455b859dd"),
    btle.UUID("b8843add-0001-4aa1-8794-c3f462030bda"),
    btle.UUID("b8843add-0004-4aa1-8794-c3f462030bda")
]

SERVICE_UUID = "932c32bd-0000-47a2-835a-a8d455b859dd"
CHAR_UUID = "932c32bd-0002-47a2-835a-a8d455b859dd"

p.setSecurityLevel("medium")

try:
    service = p.getServiceByUUID(SERVICE_UUID)
    print "Got service with UUID %s" % (service.uuid, )

    chars = service.getCharacteristics(CHAR_UUID)
    if len(chars) == 0:
        print "Failed to get the on/off characteristic :("
    else:
        onoff = chars[0]
        print "Got the on/off characteristic with UUID %s and handle 0x%0.2X" % (onoff.uuid, onoff.handle)

        if onoff.supportsRead():
            print "Reading its value"
            value = onoff.read()
            hx = ":".join(x.encode("hex") for x in value)
            print "data = %s" % (hx, )

            on = len(value) > 0 and value[0] == b"\x01"
            print "is on? %s" % (on, )

            print "Toggle!"
            if on:
                onoff.write(b"\x00", withResponse=True)
            else:
                onoff.write(b"\x01", withResponse=True)



except Exception as e:
    print "ERROR"
    print "%s" % (e, )
finally:
    print "Disconnecting"
    p.disconnect()
"""
for s in p.getServices():
    print "%s" % (s, )
    for c in s.getCharacteristics():
        if c.supportsRead():
            print "c: %s, h = 0x%0.2X, props = %s" % (c, c.getHandle(), c.propertiesToString())
            if c.getHandle() == 39:
                print "testing read"
                r = c.read()
                print "value = %s" % (r, )
                print "testing on..."
                c.write(b"\x01", withResponse=True)
        #if c.supportsRead():
        #    #if c.uuid in skip:
        #    #    print "   SKIPPING"
        #    #else:
        #    print "   value = %s" % (c.read(), )

p.disconnect()
"""
